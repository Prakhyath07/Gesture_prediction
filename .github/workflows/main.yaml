name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-gar-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - id: 'auth'
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: 'access_token'
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - uses: 'docker/login-action@v1'
        with:
          registry: 'gcr.io' # or REGION-docker.pkg.dev
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: Build, tag, and push image to google artifact registry
        id: build-image
        env:
          # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          GAR_REPOSITORY: ${{ secrets.GAR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to GAR so that it can
          # be deployed to GAR.
          docker build -t $registry/$GAR_REPOSITORY:$IMAGE_TAG .
          docker push $registry/$GAR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$registry/$GAR_REPOSITORY:$IMAGE_TAG"
          
          
  Continuous-Deployment:
    needs: build-and-push-gar-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION_NAME }}

      - id: 'auth'
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: 'access_token'
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - uses: 'docker/login-action@v1'
        with:
          registry: 'gcr.io' # or REGION-docker.pkg.dev
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
      
      
      - name: Pull latest images
        env:
          # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          GAR_REPOSITORY: ${{ secrets.GAR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
         docker pull $registry/$GAR_REPOSITORY:$IMAGE_TAG

      # - name: Stop and remove sensor container if running
      #   run: |
      #    docker ps -q --filter "name=sensor" | grep -q . && docker stop sensor && docker rm -fv sensor
       
      - name: Run Docker Image to serve users
        run: |
         docker run -d -p 80:8080 --name=gesture -e 'CASSANDRA_CLIENT_ID=${{ secrets.CASSANDRA_CLIENT_ID }}' -e 'CASSANDRA_CLIENT_SECRET=${{ secrets.CASSANDRA_CLIENT_SECRET }}' -e 'ASTRA_DB_SECURE_BUNDLE_PATH=${{ secrets.ASTRA_DB_SECURE_BUNDLE_PATH }}' -e 'MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}' -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Clean previous images and containers
        run: |
         docker system prune -f